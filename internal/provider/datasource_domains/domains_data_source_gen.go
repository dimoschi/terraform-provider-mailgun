// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_domains

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func DomainsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"authority": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "To only get domains with a specific authority. If state is specified then only state filtering will be proceed",
				MarkdownDescription: "To only get domains with a specific authority. If state is specified then only state filtering will be proceed",
			},
			"include_subaccounts": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Search on every domain that belongs to any subaccounts under this account. Default to false.",
				MarkdownDescription: "Search on every domain that belongs to any subaccounts under this account. Default to false.",
			},
			"items": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"disabled": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"code": schema.StringAttribute{
									Computed: true,
								},
								"note": schema.StringAttribute{
									Computed: true,
								},
								"permanently": schema.BoolAttribute{
									Computed: true,
								},
								"reason": schema.StringAttribute{
									Computed: true,
								},
								"until": schema.StringAttribute{
									Computed: true,
								},
							},
							CustomType: DisabledType{
								ObjectType: types.ObjectType{
									AttrTypes: DisabledValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"is_disabled": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"require_tls": schema.BoolAttribute{
							Computed: true,
						},
						"skip_verification": schema.BoolAttribute{
							Computed: true,
						},
						"smtp_login": schema.StringAttribute{
							Computed: true,
						},
						"smtp_password": schema.StringAttribute{
							Computed: true,
						},
						"spam_action": schema.StringAttribute{
							Computed: true,
						},
						"state": schema.StringAttribute{
							Computed: true,
						},
						"tracking_host": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
						"use_automatic_sender_security": schema.BoolAttribute{
							Computed: true,
						},
						"web_prefix": schema.StringAttribute{
							Computed: true,
						},
						"web_scheme": schema.StringAttribute{
							Computed: true,
						},
						"wildcard": schema.BoolAttribute{
							Computed: true,
						},
					},
					CustomType: ItemsType{
						ObjectType: types.ObjectType{
							AttrTypes: ItemsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"limit": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Max count of items. Max: 1000. Default: 100",
				MarkdownDescription: "Max count of items. Max: 1000. Default: 100",
			},
			"search": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Search domains by the given partial or complete name. Does not support wildcards",
				MarkdownDescription: "Search domains by the given partial or complete name. Does not support wildcards",
			},
			"skip": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Get the list of items starting at the nth element. Default: 0",
				MarkdownDescription: "Get the list of items starting at the nth element. Default: 0",
			},
			"sort": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Valid sort options are `name` which defaults to asc order, `name:asc`, or `name:desc`. If sorting is not specified domains are returned in reverse creation date order.",
				MarkdownDescription: "Valid sort options are `name` which defaults to asc order, `name:asc`, or `name:desc`. If sorting is not specified domains are returned in reverse creation date order.",
			},
			"state": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "To only get domains with a specific state. Can be either active, unverified or disabled.",
				MarkdownDescription: "To only get domains with a specific state. Can be either active, unverified or disabled.",
			},
			"total_count": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

type DomainsModel struct {
	Authority          types.String `tfsdk:"authority"`
	IncludeSubaccounts types.Bool   `tfsdk:"include_subaccounts"`
	Items              types.List   `tfsdk:"items"`
	Limit              types.Int64  `tfsdk:"limit"`
	Search             types.String `tfsdk:"search"`
	Skip               types.Int64  `tfsdk:"skip"`
	Sort               types.String `tfsdk:"sort"`
	State              types.String `tfsdk:"state"`
	TotalCount         types.Int64  `tfsdk:"total_count"`
}

var _ basetypes.ObjectTypable = ItemsType{}

type ItemsType struct {
	basetypes.ObjectType
}

func (t ItemsType) Equal(o attr.Type) bool {
	other, ok := o.(ItemsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ItemsType) String() string {
	return "ItemsType"
}

func (t ItemsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return nil, diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.ObjectValue, was: %T`, disabledAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isDisabledAttribute, ok := attributes["is_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_disabled is missing from object`)

		return nil, diags
	}

	isDisabledVal, ok := isDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_disabled expected to be basetypes.BoolValue, was: %T`, isDisabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	requireTlsAttribute, ok := attributes["require_tls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`require_tls is missing from object`)

		return nil, diags
	}

	requireTlsVal, ok := requireTlsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`require_tls expected to be basetypes.BoolValue, was: %T`, requireTlsAttribute))
	}

	skipVerificationAttribute, ok := attributes["skip_verification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verification is missing from object`)

		return nil, diags
	}

	skipVerificationVal, ok := skipVerificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verification expected to be basetypes.BoolValue, was: %T`, skipVerificationAttribute))
	}

	smtpLoginAttribute, ok := attributes["smtp_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_login is missing from object`)

		return nil, diags
	}

	smtpLoginVal, ok := smtpLoginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_login expected to be basetypes.StringValue, was: %T`, smtpLoginAttribute))
	}

	smtpPasswordAttribute, ok := attributes["smtp_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_password is missing from object`)

		return nil, diags
	}

	smtpPasswordVal, ok := smtpPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_password expected to be basetypes.StringValue, was: %T`, smtpPasswordAttribute))
	}

	spamActionAttribute, ok := attributes["spam_action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spam_action is missing from object`)

		return nil, diags
	}

	spamActionVal, ok := spamActionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spam_action expected to be basetypes.StringValue, was: %T`, spamActionAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	trackingHostAttribute, ok := attributes["tracking_host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tracking_host is missing from object`)

		return nil, diags
	}

	trackingHostVal, ok := trackingHostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tracking_host expected to be basetypes.StringValue, was: %T`, trackingHostAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	useAutomaticSenderSecurityAttribute, ok := attributes["use_automatic_sender_security"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`use_automatic_sender_security is missing from object`)

		return nil, diags
	}

	useAutomaticSenderSecurityVal, ok := useAutomaticSenderSecurityAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`use_automatic_sender_security expected to be basetypes.BoolValue, was: %T`, useAutomaticSenderSecurityAttribute))
	}

	webPrefixAttribute, ok := attributes["web_prefix"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`web_prefix is missing from object`)

		return nil, diags
	}

	webPrefixVal, ok := webPrefixAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`web_prefix expected to be basetypes.StringValue, was: %T`, webPrefixAttribute))
	}

	webSchemeAttribute, ok := attributes["web_scheme"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`web_scheme is missing from object`)

		return nil, diags
	}

	webSchemeVal, ok := webSchemeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`web_scheme expected to be basetypes.StringValue, was: %T`, webSchemeAttribute))
	}

	wildcardAttribute, ok := attributes["wildcard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wildcard is missing from object`)

		return nil, diags
	}

	wildcardVal, ok := wildcardAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wildcard expected to be basetypes.BoolValue, was: %T`, wildcardAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ItemsValue{
		CreatedAt:                  createdAtVal,
		Disabled:                   disabledVal,
		Id:                         idVal,
		IsDisabled:                 isDisabledVal,
		Name:                       nameVal,
		RequireTls:                 requireTlsVal,
		SkipVerification:           skipVerificationVal,
		SmtpLogin:                  smtpLoginVal,
		SmtpPassword:               smtpPasswordVal,
		SpamAction:                 spamActionVal,
		State:                      stateVal,
		TrackingHost:               trackingHostVal,
		ItemsType:                  typeVal,
		UseAutomaticSenderSecurity: useAutomaticSenderSecurityVal,
		WebPrefix:                  webPrefixVal,
		WebScheme:                  webSchemeVal,
		Wildcard:                   wildcardVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewItemsValueNull() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateNull,
	}
}

func NewItemsValueUnknown() ItemsValue {
	return ItemsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewItemsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ItemsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ItemsValue Attribute Value",
				"While creating a ItemsValue value, a missing attribute value was detected. "+
					"A ItemsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ItemsValue Attribute Type",
				"While creating a ItemsValue value, an invalid attribute value was detected. "+
					"A ItemsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ItemsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ItemsValue Attribute Value",
				"While creating a ItemsValue value, an extra attribute value was detected. "+
					"A ItemsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ItemsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.ObjectValue, was: %T`, disabledAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isDisabledAttribute, ok := attributes["is_disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_disabled is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	isDisabledVal, ok := isDisabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_disabled expected to be basetypes.BoolValue, was: %T`, isDisabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	requireTlsAttribute, ok := attributes["require_tls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`require_tls is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	requireTlsVal, ok := requireTlsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`require_tls expected to be basetypes.BoolValue, was: %T`, requireTlsAttribute))
	}

	skipVerificationAttribute, ok := attributes["skip_verification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_verification is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	skipVerificationVal, ok := skipVerificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_verification expected to be basetypes.BoolValue, was: %T`, skipVerificationAttribute))
	}

	smtpLoginAttribute, ok := attributes["smtp_login"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_login is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	smtpLoginVal, ok := smtpLoginAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_login expected to be basetypes.StringValue, was: %T`, smtpLoginAttribute))
	}

	smtpPasswordAttribute, ok := attributes["smtp_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`smtp_password is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	smtpPasswordVal, ok := smtpPasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`smtp_password expected to be basetypes.StringValue, was: %T`, smtpPasswordAttribute))
	}

	spamActionAttribute, ok := attributes["spam_action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spam_action is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	spamActionVal, ok := spamActionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spam_action expected to be basetypes.StringValue, was: %T`, spamActionAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	trackingHostAttribute, ok := attributes["tracking_host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tracking_host is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	trackingHostVal, ok := trackingHostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tracking_host expected to be basetypes.StringValue, was: %T`, trackingHostAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	useAutomaticSenderSecurityAttribute, ok := attributes["use_automatic_sender_security"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`use_automatic_sender_security is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	useAutomaticSenderSecurityVal, ok := useAutomaticSenderSecurityAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`use_automatic_sender_security expected to be basetypes.BoolValue, was: %T`, useAutomaticSenderSecurityAttribute))
	}

	webPrefixAttribute, ok := attributes["web_prefix"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`web_prefix is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	webPrefixVal, ok := webPrefixAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`web_prefix expected to be basetypes.StringValue, was: %T`, webPrefixAttribute))
	}

	webSchemeAttribute, ok := attributes["web_scheme"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`web_scheme is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	webSchemeVal, ok := webSchemeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`web_scheme expected to be basetypes.StringValue, was: %T`, webSchemeAttribute))
	}

	wildcardAttribute, ok := attributes["wildcard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wildcard is missing from object`)

		return NewItemsValueUnknown(), diags
	}

	wildcardVal, ok := wildcardAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wildcard expected to be basetypes.BoolValue, was: %T`, wildcardAttribute))
	}

	if diags.HasError() {
		return NewItemsValueUnknown(), diags
	}

	return ItemsValue{
		CreatedAt:                  createdAtVal,
		Disabled:                   disabledVal,
		Id:                         idVal,
		IsDisabled:                 isDisabledVal,
		Name:                       nameVal,
		RequireTls:                 requireTlsVal,
		SkipVerification:           skipVerificationVal,
		SmtpLogin:                  smtpLoginVal,
		SmtpPassword:               smtpPasswordVal,
		SpamAction:                 spamActionVal,
		State:                      stateVal,
		TrackingHost:               trackingHostVal,
		ItemsType:                  typeVal,
		UseAutomaticSenderSecurity: useAutomaticSenderSecurityVal,
		WebPrefix:                  webPrefixVal,
		WebScheme:                  webSchemeVal,
		Wildcard:                   wildcardVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewItemsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ItemsValue {
	object, diags := NewItemsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewItemsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ItemsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewItemsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewItemsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewItemsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewItemsValueMust(ItemsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ItemsType) ValueType(ctx context.Context) attr.Value {
	return ItemsValue{}
}

var _ basetypes.ObjectValuable = ItemsValue{}

type ItemsValue struct {
	CreatedAt                  basetypes.StringValue `tfsdk:"created_at"`
	Disabled                   basetypes.ObjectValue `tfsdk:"disabled"`
	Id                         basetypes.StringValue `tfsdk:"id"`
	IsDisabled                 basetypes.BoolValue   `tfsdk:"is_disabled"`
	Name                       basetypes.StringValue `tfsdk:"name"`
	RequireTls                 basetypes.BoolValue   `tfsdk:"require_tls"`
	SkipVerification           basetypes.BoolValue   `tfsdk:"skip_verification"`
	SmtpLogin                  basetypes.StringValue `tfsdk:"smtp_login"`
	SmtpPassword               basetypes.StringValue `tfsdk:"smtp_password"`
	SpamAction                 basetypes.StringValue `tfsdk:"spam_action"`
	State                      basetypes.StringValue `tfsdk:"state"`
	TrackingHost               basetypes.StringValue `tfsdk:"tracking_host"`
	ItemsType                  basetypes.StringValue `tfsdk:"type"`
	UseAutomaticSenderSecurity basetypes.BoolValue   `tfsdk:"use_automatic_sender_security"`
	WebPrefix                  basetypes.StringValue `tfsdk:"web_prefix"`
	WebScheme                  basetypes.StringValue `tfsdk:"web_scheme"`
	Wildcard                   basetypes.BoolValue   `tfsdk:"wildcard"`
	state                      attr.ValueState
}

func (v ItemsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 17)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["disabled"] = basetypes.ObjectType{
		AttrTypes: DisabledValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_disabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["require_tls"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["skip_verification"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["smtp_login"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["smtp_password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["spam_action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tracking_host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["use_automatic_sender_security"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["web_prefix"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["web_scheme"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wildcard"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 17)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Disabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disabled"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IsDisabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_disabled"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.RequireTls.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["require_tls"] = val

		val, err = v.SkipVerification.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skip_verification"] = val

		val, err = v.SmtpLogin.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_login"] = val

		val, err = v.SmtpPassword.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["smtp_password"] = val

		val, err = v.SpamAction.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["spam_action"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.TrackingHost.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tracking_host"] = val

		val, err = v.ItemsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.UseAutomaticSenderSecurity.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["use_automatic_sender_security"] = val

		val, err = v.WebPrefix.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["web_prefix"] = val

		val, err = v.WebScheme.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["web_scheme"] = val

		val, err = v.Wildcard.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wildcard"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ItemsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ItemsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ItemsValue) String() string {
	return "ItemsValue"
}

func (v ItemsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var disabled basetypes.ObjectValue

	if v.Disabled.IsNull() {
		disabled = types.ObjectNull(
			DisabledValue{}.AttributeTypes(ctx),
		)
	}

	if v.Disabled.IsUnknown() {
		disabled = types.ObjectUnknown(
			DisabledValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Disabled.IsNull() && !v.Disabled.IsUnknown() {
		disabled = types.ObjectValueMust(
			DisabledValue{}.AttributeTypes(ctx),
			v.Disabled.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"created_at": basetypes.StringType{},
		"disabled": basetypes.ObjectType{
			AttrTypes: DisabledValue{}.AttributeTypes(ctx),
		},
		"id":                            basetypes.StringType{},
		"is_disabled":                   basetypes.BoolType{},
		"name":                          basetypes.StringType{},
		"require_tls":                   basetypes.BoolType{},
		"skip_verification":             basetypes.BoolType{},
		"smtp_login":                    basetypes.StringType{},
		"smtp_password":                 basetypes.StringType{},
		"spam_action":                   basetypes.StringType{},
		"state":                         basetypes.StringType{},
		"tracking_host":                 basetypes.StringType{},
		"type":                          basetypes.StringType{},
		"use_automatic_sender_security": basetypes.BoolType{},
		"web_prefix":                    basetypes.StringType{},
		"web_scheme":                    basetypes.StringType{},
		"wildcard":                      basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":                    v.CreatedAt,
			"disabled":                      disabled,
			"id":                            v.Id,
			"is_disabled":                   v.IsDisabled,
			"name":                          v.Name,
			"require_tls":                   v.RequireTls,
			"skip_verification":             v.SkipVerification,
			"smtp_login":                    v.SmtpLogin,
			"smtp_password":                 v.SmtpPassword,
			"spam_action":                   v.SpamAction,
			"state":                         v.State,
			"tracking_host":                 v.TrackingHost,
			"type":                          v.ItemsType,
			"use_automatic_sender_security": v.UseAutomaticSenderSecurity,
			"web_prefix":                    v.WebPrefix,
			"web_scheme":                    v.WebScheme,
			"wildcard":                      v.Wildcard,
		})

	return objVal, diags
}

func (v ItemsValue) Equal(o attr.Value) bool {
	other, ok := o.(ItemsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Disabled.Equal(other.Disabled) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IsDisabled.Equal(other.IsDisabled) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.RequireTls.Equal(other.RequireTls) {
		return false
	}

	if !v.SkipVerification.Equal(other.SkipVerification) {
		return false
	}

	if !v.SmtpLogin.Equal(other.SmtpLogin) {
		return false
	}

	if !v.SmtpPassword.Equal(other.SmtpPassword) {
		return false
	}

	if !v.SpamAction.Equal(other.SpamAction) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.TrackingHost.Equal(other.TrackingHost) {
		return false
	}

	if !v.ItemsType.Equal(other.ItemsType) {
		return false
	}

	if !v.UseAutomaticSenderSecurity.Equal(other.UseAutomaticSenderSecurity) {
		return false
	}

	if !v.WebPrefix.Equal(other.WebPrefix) {
		return false
	}

	if !v.WebScheme.Equal(other.WebScheme) {
		return false
	}

	if !v.Wildcard.Equal(other.Wildcard) {
		return false
	}

	return true
}

func (v ItemsValue) Type(ctx context.Context) attr.Type {
	return ItemsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ItemsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at": basetypes.StringType{},
		"disabled": basetypes.ObjectType{
			AttrTypes: DisabledValue{}.AttributeTypes(ctx),
		},
		"id":                            basetypes.StringType{},
		"is_disabled":                   basetypes.BoolType{},
		"name":                          basetypes.StringType{},
		"require_tls":                   basetypes.BoolType{},
		"skip_verification":             basetypes.BoolType{},
		"smtp_login":                    basetypes.StringType{},
		"smtp_password":                 basetypes.StringType{},
		"spam_action":                   basetypes.StringType{},
		"state":                         basetypes.StringType{},
		"tracking_host":                 basetypes.StringType{},
		"type":                          basetypes.StringType{},
		"use_automatic_sender_security": basetypes.BoolType{},
		"web_prefix":                    basetypes.StringType{},
		"web_scheme":                    basetypes.StringType{},
		"wildcard":                      basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = DisabledType{}

type DisabledType struct {
	basetypes.ObjectType
}

func (t DisabledType) Equal(o attr.Type) bool {
	other, ok := o.(DisabledType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DisabledType) String() string {
	return "DisabledType"
}

func (t DisabledType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	codeAttribute, ok := attributes["code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`code is missing from object`)

		return nil, diags
	}

	codeVal, ok := codeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`code expected to be basetypes.StringValue, was: %T`, codeAttribute))
	}

	noteAttribute, ok := attributes["note"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`note is missing from object`)

		return nil, diags
	}

	noteVal, ok := noteAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`note expected to be basetypes.StringValue, was: %T`, noteAttribute))
	}

	permanentlyAttribute, ok := attributes["permanently"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permanently is missing from object`)

		return nil, diags
	}

	permanentlyVal, ok := permanentlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permanently expected to be basetypes.BoolValue, was: %T`, permanentlyAttribute))
	}

	reasonAttribute, ok := attributes["reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`reason is missing from object`)

		return nil, diags
	}

	reasonVal, ok := reasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`reason expected to be basetypes.StringValue, was: %T`, reasonAttribute))
	}

	untilAttribute, ok := attributes["until"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`until is missing from object`)

		return nil, diags
	}

	untilVal, ok := untilAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`until expected to be basetypes.StringValue, was: %T`, untilAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DisabledValue{
		Code:        codeVal,
		Note:        noteVal,
		Permanently: permanentlyVal,
		Reason:      reasonVal,
		Until:       untilVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewDisabledValueNull() DisabledValue {
	return DisabledValue{
		state: attr.ValueStateNull,
	}
}

func NewDisabledValueUnknown() DisabledValue {
	return DisabledValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDisabledValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DisabledValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DisabledValue Attribute Value",
				"While creating a DisabledValue value, a missing attribute value was detected. "+
					"A DisabledValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DisabledValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DisabledValue Attribute Type",
				"While creating a DisabledValue value, an invalid attribute value was detected. "+
					"A DisabledValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DisabledValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DisabledValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DisabledValue Attribute Value",
				"While creating a DisabledValue value, an extra attribute value was detected. "+
					"A DisabledValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DisabledValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDisabledValueUnknown(), diags
	}

	codeAttribute, ok := attributes["code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`code is missing from object`)

		return NewDisabledValueUnknown(), diags
	}

	codeVal, ok := codeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`code expected to be basetypes.StringValue, was: %T`, codeAttribute))
	}

	noteAttribute, ok := attributes["note"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`note is missing from object`)

		return NewDisabledValueUnknown(), diags
	}

	noteVal, ok := noteAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`note expected to be basetypes.StringValue, was: %T`, noteAttribute))
	}

	permanentlyAttribute, ok := attributes["permanently"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permanently is missing from object`)

		return NewDisabledValueUnknown(), diags
	}

	permanentlyVal, ok := permanentlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permanently expected to be basetypes.BoolValue, was: %T`, permanentlyAttribute))
	}

	reasonAttribute, ok := attributes["reason"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`reason is missing from object`)

		return NewDisabledValueUnknown(), diags
	}

	reasonVal, ok := reasonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`reason expected to be basetypes.StringValue, was: %T`, reasonAttribute))
	}

	untilAttribute, ok := attributes["until"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`until is missing from object`)

		return NewDisabledValueUnknown(), diags
	}

	untilVal, ok := untilAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`until expected to be basetypes.StringValue, was: %T`, untilAttribute))
	}

	if diags.HasError() {
		return NewDisabledValueUnknown(), diags
	}

	return DisabledValue{
		Code:        codeVal,
		Note:        noteVal,
		Permanently: permanentlyVal,
		Reason:      reasonVal,
		Until:       untilVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewDisabledValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DisabledValue {
	object, diags := NewDisabledValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDisabledValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DisabledType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDisabledValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDisabledValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDisabledValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDisabledValueMust(DisabledValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DisabledType) ValueType(ctx context.Context) attr.Value {
	return DisabledValue{}
}

var _ basetypes.ObjectValuable = DisabledValue{}

type DisabledValue struct {
	Code        basetypes.StringValue `tfsdk:"code"`
	Note        basetypes.StringValue `tfsdk:"note"`
	Permanently basetypes.BoolValue   `tfsdk:"permanently"`
	Reason      basetypes.StringValue `tfsdk:"reason"`
	Until       basetypes.StringValue `tfsdk:"until"`
	state       attr.ValueState
}

func (v DisabledValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["note"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["permanently"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["reason"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["until"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Code.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["code"] = val

		val, err = v.Note.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["note"] = val

		val, err = v.Permanently.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["permanently"] = val

		val, err = v.Reason.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["reason"] = val

		val, err = v.Until.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["until"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DisabledValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DisabledValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DisabledValue) String() string {
	return "DisabledValue"
}

func (v DisabledValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"code":        basetypes.StringType{},
		"note":        basetypes.StringType{},
		"permanently": basetypes.BoolType{},
		"reason":      basetypes.StringType{},
		"until":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"code":        v.Code,
			"note":        v.Note,
			"permanently": v.Permanently,
			"reason":      v.Reason,
			"until":       v.Until,
		})

	return objVal, diags
}

func (v DisabledValue) Equal(o attr.Value) bool {
	other, ok := o.(DisabledValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Code.Equal(other.Code) {
		return false
	}

	if !v.Note.Equal(other.Note) {
		return false
	}

	if !v.Permanently.Equal(other.Permanently) {
		return false
	}

	if !v.Reason.Equal(other.Reason) {
		return false
	}

	if !v.Until.Equal(other.Until) {
		return false
	}

	return true
}

func (v DisabledValue) Type(ctx context.Context) attr.Type {
	return DisabledType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DisabledValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"code":        basetypes.StringType{},
		"note":        basetypes.StringType{},
		"permanently": basetypes.BoolType{},
		"reason":      basetypes.StringType{},
		"until":       basetypes.StringType{},
	}
}
